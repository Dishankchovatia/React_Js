{"version":3,"file":"static/js/857.ab1a917a.chunk.js","mappings":"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","sources":["hooks/use-http.js","lib/api.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"sourcesContent":["import { useReducer, useCallback } from \"react\";\r\n\r\nfunction httpReducer(state, action) {\r\n  if (action.type === \"SEND\") {\r\n    return {\r\n      data: null,\r\n      error: null,\r\n      status: \"pending\",\r\n    };\r\n  }\r\n\r\n  if (action.type === \"SUCCESS\") {\r\n    return {\r\n      data: action.responseData,\r\n      error: null,\r\n      status: \"completed\",\r\n    };\r\n  }\r\n\r\n  if (action.type === \"ERROR\") {\r\n    return {\r\n      data: null,\r\n      error: action.errorMessage,\r\n      status: \"completed\",\r\n    };\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nfunction useHttp(requestFunction, startWithPending = false) {\r\n  const [httpState, dispatch] = useReducer(httpReducer, {\r\n    status: startWithPending ? \"pending\" : null,\r\n    data: null,\r\n    error: null,\r\n  });\r\n\r\n  const sendRequest = useCallback(\r\n    async function (requestData) {\r\n      dispatch({ type: \"SEND\" });\r\n      try {\r\n        const responseData = await requestFunction(requestData);\r\n        dispatch({ type: \"SUCCESS\", responseData });\r\n      } catch (error) {\r\n        dispatch({\r\n          type: \"ERROR\",\r\n          errorMessage: error.message || \"Something went wrong!\",\r\n        });\r\n      }\r\n    },\r\n    [requestFunction]\r\n  );\r\n\r\n  return {\r\n    sendRequest,\r\n    ...httpState,\r\n  };\r\n}\r\n\r\nexport default useHttp;\r\n","const FIREBASE_DOMAIN = \"https://react-js-45cbf-default-rtdb.firebaseio.com\";\r\n\r\nexport async function getAllQuotes() {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not fetch quotes.\");\r\n  }\r\n\r\n  const transformedQuotes = [];\r\n\r\n  for (const key in data) {\r\n    const quoteObj = {\r\n      id: key,\r\n      ...data[key],\r\n    };\r\n\r\n    transformedQuotes.push(quoteObj);\r\n  }\r\n\r\n  return transformedQuotes;\r\n}\r\n\r\nexport async function getSingleQuote(quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not fetch quote.\");\r\n  }\r\n\r\n  const loadedQuote = {\r\n    id: quoteId,\r\n    ...data,\r\n  };\r\n\r\n  return loadedQuote;\r\n}\r\n\r\nexport async function addQuote(quoteData) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(quoteData),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not create quote.\");\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport async function addComment(requestData) {\r\n  const response = await fetch(\r\n    `${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`,\r\n    {\r\n      method: \"POST\",\r\n      body: JSON.stringify(requestData.commentData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    }\r\n  );\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not add comment.\");\r\n  }\r\n\r\n  return { commentId: data.name };\r\n}\r\n\r\nexport async function getAllComments(quoteId) {\r\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\r\n\r\n  const data = await response.json();\r\n\r\n  if (!response.ok) {\r\n    throw new Error(data.message || \"Could not get comments.\");\r\n  }\r\n\r\n  const transformedComments = [];\r\n\r\n  for (const key in data) {\r\n    const commentObj = {\r\n      id: key,\r\n      ...data[key],\r\n    };\r\n\r\n    transformedComments.push(commentObj);\r\n  }\r\n\r\n  return transformedComments;\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__xyZGR\"};","import classes from './HighlightedQuote.module.css';\r\n\r\nconst HighlightedQuote = (props) => {\r\n  return (\r\n    <figure className={classes.quote}>\r\n      <p>{props.text}</p>\r\n      <figcaption>{props.author}</figcaption>\r\n    </figure>\r\n  );\r\n};\r\n\r\nexport default HighlightedQuote;","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__a4x+D\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__4zgOh\",\"loading\":\"NewCommentForm_loading__MWEUI\",\"control\":\"NewCommentForm_control__irGrs\",\"actions\":\"NewCommentForm_actions__dv6Ql\"};","import { useRef, useEffect } from 'react';\r\n\r\nimport useHttp from '../../hooks/use-http';\r\nimport { addComment } from '../../lib/api';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport classes from './NewCommentForm.module.css';\r\n\r\nconst NewCommentForm = (props) => {\r\n  const commentTextRef = useRef();\r\n\r\n  const { sendRequest, status, error } = useHttp(addComment);\r\n\r\n  const { onAddedComment } = props;\r\n\r\n  useEffect(() => {\r\n    if (status === 'completed' && !error) {\r\n      onAddedComment();\r\n    }\r\n  }, [status, error, onAddedComment]);\r\n\r\n  const submitFormHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const enteredText = commentTextRef.current.value;\r\n\r\n    // optional: Could validate here\r\n\r\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={submitFormHandler}>\r\n      {status === 'pending' && (\r\n        <div className='centered'>\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      <div className={classes.control} onSubmit={submitFormHandler}>\r\n        <label htmlFor='comment'>Your Comment</label>\r\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\r\n      </div>\r\n      <div className={classes.actions}>\r\n        <button className='btn'>Add Comment</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewCommentForm;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__XpGPS\"};","import classes from './CommentItem.module.css';\r\n\r\nconst CommentItem = (props) => {\r\n  return (\r\n    <li className={classes.item}>\r\n      <p>{props.text}</p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default CommentItem;","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__qDLBq\"};","import CommentItem from './CommentItem';\r\nimport classes from './CommentsList.module.css';\r\n\r\nconst CommentsList = (props) => {\r\n  return (\r\n    <ul className={classes.comments}>\r\n      {props.comments.map((comment) => (\r\n        <CommentItem key={comment.id} text={comment.text} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default CommentsList;","import { useState, useEffect, useCallback } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport classes from './Comments.module.css';\r\nimport NewCommentForm from './NewCommentForm';\r\nimport useHttp from '../../hooks/use-http';\r\nimport { getAllComments } from '../../lib/api';\r\nimport LoadingSpinner from '../UI/LoadingSpinner';\r\nimport CommentsList from './CommentsList';\r\n\r\nconst Comments = () => {\r\n  const [isAddingComment, setIsAddingComment] = useState(false);\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [quoteId, sendRequest]);\r\n\r\n  const startAddCommentHandler = () => {\r\n    setIsAddingComment(true);\r\n  };\r\n\r\n  const addedCommentHandler = useCallback(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  let comments;\r\n\r\n  if (status === 'pending') {\r\n    comments = (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === 'completed' && loadedComments && loadedComments.length > 0) {\r\n    comments = <CommentsList comments={loadedComments} />;\r\n  }\r\n\r\n  if (\r\n    status === 'completed' &&\r\n    (!loadedComments || loadedComments.length === 0)\r\n  ) {\r\n    comments = <p className='centered'>No comments were added yet!</p>;\r\n  }\r\n\r\n  return (\r\n    <section className={classes.comments}>\r\n      <h2>User Comments</h2>\r\n      {!isAddingComment && (\r\n        <button className='btn' onClick={startAddCommentHandler}>\r\n          Add a Comment\r\n        </button>\r\n      )}\r\n      {isAddingComment && (\r\n        <NewCommentForm\r\n          quoteId={quoteId}\r\n          onAddedComment={addedCommentHandler}\r\n        />\r\n      )}\r\n      {comments}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comments;","import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","requestFunction","startWithPending","arguments","length","undefined","httpState","dispatch","useReducer","sendRequest","useCallback","async","requestData","message","FIREBASE_DOMAIN","getAllQuotes","response","fetch","concat","json","ok","Error","transformedQuotes","key","quoteObj","id","push","getSingleQuote","quoteId","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","props","_jsxs","className","classes","children","_jsx","text","author","commentTextRef","useRef","useHttp","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","onSubmit","LoadingSpinner","htmlFor","rows","ref","comments","map","comment","CommentItem","Comments","isAddingComment","setIsAddingComment","useState","params","useParams","loadedComments","addedCommentHandler","CommentsList","onClick","startAddCommentHandler","NewCommentForm","QuoteDetail","match","useRouteMatch","loadedQuote","Fragment","HighlightedQuote","Route","path","exact","Link","to","url"],"sourceRoot":""}